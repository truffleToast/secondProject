<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri = "http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri = "http://java.sun.com/jsp/jstl/fmt" %>


<c:set var ="cpath" value ="${pageContext.request.contextPath}"/>
<c:set var ="tempImageFolder" value ="C:\eGovFrame-4.0.0\workspace.edu\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\webapps\temp"> 
<!DOCTYPE html>
<html>
<head>
    <title>스케치 패드</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.1/fabric.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>    
    
    <style>
body {
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    flex-direction: column;
}

#canvas-container {
    border: 1px solid #ccc;
    margin-bottom: 20px;
}
#image-container {
    display: flex;
    overflow-x: auto;
    
}

#bg-container {
    display: flex;
    overflow-x: auto;
    
}

.ai-imgEdit{
	display:flex;
	justify-content: center;
}
.ai-imgEdit div{
	width:33%
}
#imageEdit-makeImg__form input{
	width:100%
}


</style>
</head>
<body>
<div id="canvas-container">
  <canvas id="main-canvas" width="1000" height="600"></canvas>
</div>

<div class="container">
  
  <br>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs justify-content-center" role="tablist">
    <li class="nav-item">
      <a class="nav-link active text-danger font-weight-bold" data-toggle="tab" href="#home">사진</a>
    </li>
    <li class="nav-item">
      <a class="nav-link text-warning font-weight-bold" data-toggle="tab" href="#menu1">배경</a>
    </li>
    <li class="nav-item">
      <a class="nav-link text-info font-weight-bold" data-toggle="tab" href="#menu2">스티커</a>
    </li>
    <li class="nav-item">
      <a class="nav-link text-success font-weight-bold" data-toggle="tab" href="#menu3">그리기</a>
    </li>
    <li class="nav-item">
      <a class="nav-link text-primary font-weight-bold" data-toggle="tab" href="#menu4">A.I</a>
    </li>
  </ul>

  <!-- Tab panes -->
  <div class="tab-content">
    <div id="home" class="container tab-pane active"><br>
      <h3>사진</h3>
      	<div id="image-container">
    		<input type="file" id="image-upload" multiple="multiple" accept="image/*">
  		</div>
    </div>
    <div id="menu1" class="container tab-pane fade"><br>
	   <h3>배경</h3>
	   <div id="bg-container">
	    <input type="file" id="background-upload" multiple="multiple" accept="image/*">
	  </div>
    </div>
    <div id="menu2" class="container tab-pane fade"><br>
      <h3>스티커</h3>
      <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>
    </div>
    <div id="menu3" class="container tab-pane fade"><br>
      <h3>그리기</h3>
      <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>
    </div>
    <div id="menu4" class="container tab-pane fade"><br>
      <h3>A.I</h3>
      <!-- 이미지 편집 플라스크 -->
	    <div class="ai-imgEdit">
		<!-- removeBg -->
			<div class="imageEdit-removeBg">
				<span calss="imageEdit-removeBg__span">배경 제거</span>
				<form id="imageEdit-removeBg__form" 
				method= "post" enctype ="multipart/form-data">
					<input type ="file" name ="myfile">
					<input type ="submit" id="imageEdit-removeBg__sub" value="배경제거하기">
				</form>
			</div>
		<!-- imageGenerator 생성(Kalo)-->
			<div class="imageEdit-makeImg">
				<span class ="imageEdit-makeImg__span">이미지 생성</span>
				<form id ="imageEdit-makeImg__form" method ="post">
					<h6>구체적으로 작성하여 주시고, 영어로 작성해주세요</h6>
					<input type ="text" name ="prompt" placeholder="생성할 이미지의 텍스트를 입력해주세요"><!-- 생성할 이미지 텍스트 --><br>
					<span class ="makeImg-style">원하는 스타일</span>
					<select name="art_style" id="art_style">
						<option value="">선택 안함</option>
						<option value="by Renoir">르누아르 스타일</option>
						<option value="by Picasso">피카소 스타일</option>
						<option value="by Gogh">고흐 스타일</option>
						<option value="Anime">애니메이션 스타일</option>
						<option value="cartoon">카툰 스타일</option>
					</select>
					<br>
					<input type ="text" name ="negative_prompt"> <!-- 이미지에서 생성하고 싶지 않은 요소 -->
					<span>- 생성시 제거할 요소</span>
					<input type ="submit" id="imageEdit-makeImg__sub" value="이미지 생성하기">
				</form>
			</div>
	   	</div>
    </div>
  </div>
</div>




<button id="save-jpg-button">Save as JPG</button>
<!-- 테스트용-->
<div id = "imageEdit-modal__removeBg">
배경 제거 이미지 테스트	
</div>
<div id ="imageEdit-modal__makedImg">
만들어진 이미지 테스트 
</div>











<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js"></script>
<script>


$(document).ready(function(){
    // 이미지 배경 제거 기능 처리
    $("#imageEdit-removeBg__form").on('submit',function(e){
        e.preventDefault(); // 폼 제출 기본 이벤트 방지
        var removeBg_fData = new FormData(this); // 폼 데이터 생성
		console.log(removeBg_fData)
        // AJAX 요청 설정 및 전송
        $.ajax({
            url:'http://192.168.20.128:5000/removeBg', // 요청 URL
            type: 'POST', // HTTP 요청 방식
            data: removeBg_fData, // 전송할 데이터
            contentType: false, // 컨텐트 타입 설정 방지
            processData: false, // 데이터를 쿼리 문자열로 변환 방지
            success: function(data) { // 요청 성공 시 처리할 함수
                uploadRemovedImg(data);// 배경이 제거된 이미지 업로드 함수 호출
                
            },
            error: function(xhr, status, error){ // 요청 실패 시 처리할 함수
                alert('Error: ' + error); // 오류 메시지 표시
            }
            
        });
    });

    // 텍스트 기반 이미지 생성 기능 처리
    $("#imageEdit-makeImg__form").on('submit',function(e){
        e.preventDefault(); // 폼 제출 기본 이벤트 방지
        var promptValue = $("input[name='prompt']").val(); // name이 prompt인 input
        var styleValue = $("#art_style option:selected").val(); //art스타일에서 선택된 것의 밸류
        
        //삼항연산자로 처리
        var combinedPrompt = promptValue + (styleValue ? ", " + styleValue : "");
        
        var makeImg_fData = new FormData(this);
        makeImg_fData.set("prompt", combinedPrompt); // 보낼 객체를 저 결합한 데이터를 바탕으로 처리

        // AJAX 요청 설정 및 전송
        $.ajax({
            url:'http://192.168.20.128:5000/makeImg', // 요청 URL
            type: 'POST', // HTTP 요청 방식
            data: makeImg_fData, // 전송할 데이터
            contentType: false, // 컨텐트 타입 설정 방지
            processData: false, // 데이터를 쿼리 문자열로 변환 방지
            success: function(data) { // 요청 성공 시 처리할 함수
                uploadMakedImg(data); // 생성된 이미지 업로드 함수 호출
            },
            error: function(xhr, status, error){ // 요청 실패 시 처리할 함수
                alert('Error: ' + error); // 오류 메시지 표시
            }
        });
    });

});

// 배경이 제거된 이미지를 모달에 표시하는 함수
function uploadRemovedImg(data){
	var imageUrl = data.image_url;
    $("#imageEdit-modal__removeBg").append('<img src="'+imageUrl+'" />');
    console.log(imageUrl);
}

// 생성된 이미지를 모달에 표시하는 함수
function uploadMakedImg(data){
    $("#imageEdit-modal__makedImg").append('<img src="' + imageUrl + '"/>');
}








document.addEventListener('DOMContentLoaded', function () {
	  var canvas = new fabric.Canvas('main-canvas');
	  var imageContainer = document.getElementById('image-container');
	  var uploadInput = document.getElementById('image-upload');
	  var propertiesPanel = document.getElementById('properties-panel'); // 편집 옵션을 담은 패널의 ID
	  var photoButton = document.getElementById('photo-button');
	  var backgroundButton = document.getElementById('background-button');
	  var bgContainer = document.getElementById('bg-container');
	  var bgUploadInput = document.getElementById('background-upload');
	  
		  
	  // 이미지를 Canvas에 추가하는 함수
	  function addImageToCanvas(imgElement) {
	    fabric.Image.fromURL(imgElement.src, function (oImg) {
	      canvas.add(oImg).renderAll();
	      // 이미지를 선택하면 편집 옵션 패널을 표시
	      propertiesPanel.style.display = 'block';
	      // 선택된 객체의 속성을 패널에 표시할 수 있습니다.
	      // 예: propertiesPanel.querySelector('.width').textContent = oImg.getScaledWidth();
	    });
	  }
		//배경이미지로 추가하는 함수
		function setCanvasBackground(imgElement) {
			canvas.setBackgroundImage(imgElement.src, canvas.renderAll.bind(canvas), {
		        
		    });
		}
	  
		bgContainer.addEventListener('click', function (e) {
		    var clickedImage = e.target;
		    // 클릭한 이미지를 canvas의 배경으로 설정
		    setCanvasBackground(clickedImage);
		});

		// 이미지를 Canvas에 추가하는 함수 (이미지 추가와 배경 설정을 분리)
		function addImageToCanvas(imgElement) {
		    fabric.Image.fromURL(imgElement.src, function (oImg) {
		        canvas.add(oImg).renderAll();
		        // 이미지를 선택하면 편집 옵션 패널을 표시
		        propertiesPanel.style.display = 'block';
		        // 선택된 객체의 속성을 패널에 표시할 수 있습니다.
		        // 예: propertiesPanel.querySelector('.width').textContent = oImg.getScaledWidth();
		    });
		}

		
		
	  uploadInput.addEventListener('change', function (e) {
	    var files = e.target.files;
	   

	    for (var i = 0; i < files.length; i++) {
	      (function (file) {
	        var reader = new FileReader();
	        reader.onload = function (e) {
	          var img = new Image();
	          img.src = e.target.result;
	          img.style.maxHeight = '100px';
	          img.onclick = function () {
	            // 이미지 클릭 시 Canvas에 추가
	            addImageToCanvas(img);
	          };
	          imageContainer.appendChild(img);
	        };
	        reader.readAsDataURL(file);
	      })(files[i]);
	    }
	  });
	  
	  
	  bgUploadInput.addEventListener('change', function (e) {
		    var files = e.target.files;

		    for (var i = 0; i < files.length; i++) {
		      (function (file) {
		        var reader = new FileReader();
		        reader.onload = function (e) {
		          var img = new Image();
		          img.src = e.target.result;
		          img.style.maxHeight = '100px';
		          img.onclick = function () {
		            // 이미지 클릭 시 Canvas에 추가
		        	 setCanvasBackground(img);
		          };
		          bgContainer.appendChild(img);
		        };
		        reader.readAsDataURL(file);
		      })(files[i]);
		    }
		  });
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  document.getElementById('save-jpg-button').onclick = function() {
		    var dataURL = canvas.toDataURL({
		      format: 'jpeg',
		      quality: 0.8
		    });
		    var link = document.createElement('a');
		    link.download = 'canvas-image.jpg';
		    link.href = dataURL;
		    link.click();
		};
	  
	  
	  
	});



</script>

</body>
</html>